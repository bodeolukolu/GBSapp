#!/bin/bash

magenta=$'\e[1;35m'
white=$'\e[0m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
# GBSapp_dir=$(dirname "$0")
# projdir=$1
threads=""
# relpath=$(pwd)

GBSapp_dir="$( cd -- "$(dirname "$0 ")" >/dev/null 2>&1 ; pwd -P )/"

if [[ "$1" == "" ]]; then
  echo -e "${white}\n\tUsage:\n\t\t./GBSapp/GBSapp\t\t<command>\n"
  echo -e "${yellow}\tAutomated variant calling and filtering\n"
  echo -e "${white}\tCommand:"
  echo -e "${white}\t\t--version, -v\t\tprint software version"
  echo -e "${white}\t\t--help, -h\t\tprint help message"
  echo -e "${white}\t\tinstall\t\t\tsoftware dependencies"
  echo -e "${white}\t\tproj_dir\t\tspecify absolute or relative path to project directory\n"
  exit 0
fi
if [[ "$1" == "-v" || "$1" == "--version" ]]; then
  echo -e "${white}\n\tProgram:	GBSapp"
  echo -e "${white}\tVersion:	1.0"
  echo -e "${white}\tDescription:	Automated Pipeline for Variant/Haplotype Calling and Filtering"
  echo -e "${white}\tContact:	Bode Olukolu <bolukolu@utk.edu>\n"
  exit 0
fi
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  echo -e "${white}\n\tUsage:\n\t\t./GBSapp/GBSapp\t\t<command>\n"
  echo -e "${yellow}\tAutomated variant calling and filtering\n"
  echo -e "${white}\tCommand:"
  echo -e "${white}\t\t--version, -v\t\tprint software version"
  echo -e "${white}\t\t--help, -h\t\tprint help message"
  echo -e "${white}\t\tinstall\t\t\tsoftware dependencies"
  echo -e "${white}\t\tproj_dir\t\tspecify absolute or relative path to project directory\n"
  exit 0
fi
if [[ "$1" == "install" ]]; then
  mkdir -p $GBSapp_dir/tools
  cd $GBSapp_dir/tools
  bash $GBSapp_dir/scripts/install.sh
  wait; exit 0
fi

projdir="$( cd -- "$(dirname "$1 ")" >/dev/null 2>&1 ; pwd -P )/"
if [[ ! -d "$GBSapp_dir/tools" ]]; then
  mkdir -p $GBSapp_dir/tools
  cd $GBSapp_dir/tools
  bash $GBSapp_dir/scripts/install.sh
fi
if [[ -d "$GBSapp_dir/tools" ]]; then
  cd $GBSapp_dir/tools
  bash $GBSapp_dir/scripts/install.sh
fi


# if [ "${GBSapp_dir:0:1}" = "." ]; then
#   if [ "${GBSapp_dir:0:15}" = "../../../../../" ]; then
#     GBSapp_dir="${relpath%/*/*/*/*/*}${GBSapp_dir//*..}"
#   fi
#   if [ "${GBSapp_dir:0:12}" = "../../../../" ]; then
#     GBSapp_dir="${relpath%/*/*/*/*}${GBSapp_dir//*..}"
#   fi
#   if [ "${GBSapp_dir:0:9}" = "../../../" ]; then
#     GBSapp_dir="${relpath%/*/*/*}${GBSapp_dir//*..}"
#   fi
#   if [ "${GBSapp_dir:0:6}" = "../../" ]; then
#     GBSapp_dir="${relpath%/*/*}${GBSapp_dir//*..}"
#   fi
#   if [ "${GBSapp_dir:0:3}" = "../" ]; then
#     GBSapp_dir="${relpath%/*}${GBSapp_dir//*..}"
#   fi
#   if [ "${GBSapp_dir:0:2}" != ".." ]; then
#     if [ "${GBSapp_dir:0:1}" = "." ]; then
#       GBSapp_dir="${relpath}${GBSapp_dir:1}"
#     fi
#   fi
# fi
# if [ "${GBSapp_dir: -1}" != "/" ]; then
#   GBSapp_dir="${GBSapp_dir}/"
# fi
#
# if [ "${projdir:0:1}" = "." ]; then
#   if [ "${projdir:0:15}" = "../../../../../" ]; then
#     projdir="${relpath%/*/*/*/*/*}${projdir//*..}"
#   fi
#   if [ "${projdir:0:12}" = "../../../../" ]; then
#     projdir="${relpath%/*/*/*/*}${projdir//*..}"
#   fi
#   if [ "${projdir:0:9}" = "../../../" ]; then
#     projdir="${relpath%/*/*/*}${projdir//*..}"
#   fi
#   if [ "${projdir:0:6}" = "../../" ]; then
#     projdir="{relpath%/*/*}${projdir//*..}"
#   fi
#   if [ "${projdir:0:3}" = "../" ]; then
#     projdir="${relpath%/*}${projdir//*..}"
#   fi
#   if [ "${projdir:0:2}" = "./" ]; then
#     projdir="${relpath}${projdir:1}"
#   fi
#   if [ "${projdir}" = . ]; then
#     projdir="${relpath}"
#   fi
# fi
# if [ "${projdir:-1}" != "/" ]; then
#   projdir="${projdir}/"
# fi

####################################################################################################################
####################################################################################################################
####################################################################################################################

cd $projdir
echo -e "${white}\n##################################################################################\n"
echo -e "${yellow}\t- Program:	GBSapp"
echo -e "${yellow}\t- Version:	1.0"
echo -e "${yellow}\t- Description:	Automated Pipeline for Variant/Haplotype Calling and Filtering"
echo -e "${yellow}\t- Contact:	Bode Olukolu <bolukolu@utk.edu> ${white}"
echo -e "${white}\n##################################################################################\n"

d=($(find . -maxdepth 1 -type d | wc -l))
if [[ $d -le 3 && -d refgenomes ]]; then
  echo ""
else
  echo -e "${magenta}- Expecting only 2 folders (i.e. refgenomes and samples) ${white}"
  echo -e "${magenta}- Do you want to continue running GBSapp? ${white}"
  read -p "- y(YES) or n(NO)? " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  else
      echo -e "${white}\n##############################################################################"
  fi
fi

f=($(find . -maxdepth 1 -type f | wc -l))
if [ $f == 1 ]; then
  echo ""
else
  echo -e "${magenta}- Expecting only 1 file (i.e. config.sh) ${white}"
  echo -e "${magenta}- Do you want to continue running GBSapp? ${white}"
  read -p "- y(YES) or n(NO)? " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  else
      echo -e "${white}\n\n##############################################################################"
  fi
fi

if [[ ! -f config.sh ]]; then
  echo -e "${magenta}- config.sh is required ${white}"
  echo -e "${magenta}- GBSapp will exist in 5 seconds ${white}"
  exit 1
fi

####################################################################################################################
####################################################################################################################
####################################################################################################################
cd $projdir
samples_alt_dir="$(grep samples_alt_dir config.sh)"
samples_alt_dir=${samples_alt_dir//*=}
if [[ -z "$samples_alt_dir" ]]; then samples_alt_dir=false; fi

if [[ "$samples_alt_dir" == false ]] && [[ -d "./samples" ]] ; then
  :
else
	if [ -d ./samples ] && [ "$(ls -A ./samples)" ]; then
    if [[ $(ls -lh | grep samples) =~ '->' ]]; then
      :
    else
      echo -e "${magenta}- samples already exist in ./project_directory/samples/ ${white}\n"
      echo -e "${magenta}- cannot use both <alternate_samples_directory> and <./project_directory/samples/ ${white}\n"
      echo -e "${magenta}- GBSapp will quit in 5 seconds ${white}\n"
      sleep 5; exit 0
    fi
	fi
	if [ ! -d ./samples ]; then
		ln -s $samples_alt_dir .
	fi
	if [ -d ./samples ] && [ -z "$(ls -A ./samples)" ]; then
		rmdir samples
		ln -s $samples_alt_dir .
	fi
fi


cd samples
if [ -d "paired" ]; then
 mv paired pe
fi
if [ -d "single" ]; then
 mv single se
fi

# Initial questions before running walkaway
cd $projdir

free=$(df . | awk 'NR==2{print $4}')
required=$(du -s . | awk '{print $1}')
required=$((required * 120/100))
if [[ "$free" -lt "$required" ]]; then
	echo -e "${magenta}- You might not have enough disk space. Free: $((free/1000000))G; Required(approx. 1.2x the size of fastq files): $((required/1000000))G  ${white}\n"
	echo -e "${magenta}- Do you want to continue running GBSapp? ${white}"
	read -p "- Do you want to continue running GBSapp\n? " -n 1 -r
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		printf '\n'
		echo -e "${magenta}- Exiting GBSapp ${white}\n"
		sleep 5 && exit 1
	fi
fi

if [ -d "./samples/pe" ]; then
  echo -e "${magenta}- GBSapp will modify your sample fastq files by concatenating <pe-R1-reads> and <se-reads> ${white}"
  echo -e "${magenta}- Do you want create a copy/backup of your sample fastq file? ${white}"
  read -p "- y(YES) or n(NO)? " -n 1 -r
  if [[ $REPLY = ^[Yy]$ ]]; then
    printf "\n"
    echo -e "${magenta}- A copy of your sample fastq files will be stored in user-defined directory or in ${projdir}/samples_backup/ ${white}"
    echo -e "${magenta}- Specify alternate directory (Absolute/Full path) or Press Enter? ${white}"
    read alt_dir
    if [[ -z $alt_dir ]]; then
    	cp -r samples samples_backup
    else
	cp -r samples $alt_dir
    fi
  else
    echo -e "${white}\n##############################################################################"
  fi
else
  :
fi


####################################################################################################################
# check if the job was previously submitted and interrupted
cd $projdir
n_nodes="$(grep nodes config.sh)"
n_nodes=${nodes//*=}
if [ -z "$n_nodes" ]; then
 n_nodes=1
fi

ref1="$(grep ^ref1= config.sh)" && ref1=${ref1//*=}
ref2="$(grep ^ref2= config.sh)" && ref2=${ref2//*=}
ref3="$(grep ^ref3= config.sh)" && ref3=${ref3//*=}
ref4="$(grep ^ref4= config.sh)" && ref4=${ref4//*=}

nthreads="$(grep threads config.sh)"
nthreads=${nthreads//*=}
totalk=$(awk '/^MemTotal:/{print $2}' /proc/meminfo)
loopthreads=2
if [[ "$threads" -gt 1 ]]; then
	N=$((threads/2))
	ram1=$(($totalk/$N))
else
	N=1 && loopthreads=threads
fi
ram1=$((ram1/1000000))
Xmx1=-Xmx${ram1}G
ram2=$(echo "$totalk*0.00000095" | bc)
ram2=${ram2%.*}
Xmx2=-Xmx${ram2}G
if [[ -z "$threads" ]]; then
	threads=$(nproc --all)
	if [[ "$threads" -ge 4 ]]; then
		threads=$((threads-2))
	fi
fi
if  [[ "$threads" -ge 1 ]]; then
	loopthread=2
	N=$(($threads/2))
else
	N=1 && loopthread=$threads
fi
if [[ "$threads" -le 4 ]]; then
	gthreads=threads
	gN=1
else
	gthreads=4
	gN=$(( threads / gthreads ))
fi


if test ! -f ${projdir}/Analysis_Complete; then
  if test ! -f ${projdir}/compress_done.txt && test -f ${projdir}/alignment_summaries/total_read_count.txt; then
    echo -e "${magenta}- Job was interrupted during sample fastq file compression/indexing ${white}"
    echo -e "${magenta}- Do you want to continue from where this analytical step was interrupted? ${white}"
    read -p "- y(YES) or n(NO)? " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo -e "${magenta}- GBSapp will delete all compressed/indexed, and will redo analysis if read alignments and alignment post-processing is performed ${white}"
      rm ${projdir}/samples/*_uniq_R1.fasta ${projdir}/samples/*_uniq_R2.fasta 2> /dev/null
    else
      echo -e "${magenta}- GBSapp will continue analysis, while removing interrupted files ${white}"
    fi
  fi

  if test ! -f ${projdir}/compress_done.txt; then
    :
  else
    if test ! -f ${projdir}/alignment_done.txt; then
      if [[ -d "${projdir}/preprocess" ]]; then
        echo -e "${magenta}- Job was interrupted during alignment post-processing ${white}"
        echo -e "${magenta}- Do you want to continue from where this analytical step was interrupted? ${white}"
        read -p "- y(YES) or n(NO)? " -n 1 -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          echo -e "${magenta}- GBSapp will delete all .bam files and redo analysis if if read alignments and alignment post-processing is performed ${white}"
          rm ${projdir}/preprocess/*_redun.sam 2> /dev/null
        else
          echo -e "${magenta}- GBSapp will continue analysis, while removing interrupted files ${white}"
        fi
      fi
    fi
  fi

  if test ! -f ${projdir}/alignment_done.txt || test ! -f ${projdir}/compress_done.txt ; then
    :
  else
    if test ! -f ${projdir}/precall_done.txt && test ! -f ${projdir}/Analysis_Complete; then
      echo -e "${magenta}- Job was interrupted during sequence alignment ${white}"
      echo -e "${magenta}- Do you want to continue from where this analytical step was interrupted? ${white}"
      read -p "- y(YES) or n(NO)? " -n 1 -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${magenta}- GBSapp will delete all .sam files and redo analysis if read alignments and alignment post-processing is performed ${white}"
        rm ${projdir}/preprocess/*_redun.sam 2> /dev/null
      else
        echo -e "${magenta}- GBSapp will continue analysis, while removing interrupted files ${white}"
      fi
    fi
  fi
fi

if test -f ${projdir}/Analysis_Complete; then
  echo -e "${magenta}- Analysis was completed ${white}"
  echo -e "${magenta}- Do you want to repeat one or more analytical step(s)? ${white}"
  read -p "- y(YES) or n(NO)? " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${magenta}- GBSapp will exit in 5s ${white}"
    sleep 5
    exit 1
  else
    rm ${projdir}/Analysis_Complete
  fi
fi



####################################################################################################################
####################################################################################################################

main() {
cd $projdir
cd samples
samples_list=$(ls -S *.f* | awk '{gsub(/\n/," "); print}')
cd ../

string="${GBSapp_dir}/scripts/GBSapp_internal_parameters.sh"
string2=${string//'//'/'/'}

cd $projdir

awk '{gsub(/ /,""); print}' config.sh > unixformat.sh
mv unixformat.sh config.sh
awk '{ sub("\r$",""); print}' config.sh > unixformat.sh
mv unixformat.sh config.sh
string="$(awk '/ref/&&/=/&&/.fa/ {print}' config.sh | wc -l)"
if [[ "$string" -eq 0 ]]; then
string=1
fi
string3=${GBSapp_dir}/scripts/subgenome_ref_files_${string}.sh

cd $projdir
printf "#""!""/bin/bash \n\n" > header.txt
printf "GBSapp_dir=${GBSapp_dir}\n" > fetchdir.txt
printf "projdir=${projdir}" >> fetchdir.txt

string="$(grep walkaway config.sh)"
string=${string//*=}
cluster="$(grep cluster config.sh)"
cluster=${cluster//*=}
n_nodes="$(grep nodes config.sh)"
n_nodes=${n_nodes//*=}
thread_node="$(grep ^threads config.sh)"
thread_node=${thread_node//*=}

if [ -z "$string" ]; then
 string=true
fi
if [ "$cluster" == false ]; then
 unset cluster
fi
if [ -z "$n_nodes" ]; then
 n_nodes=1
fi





if [[ "$string" == false ]]; then
  echo -e "${magenta}- GBSapp will run in walk-through mode\n\n############################################################################## ${white}"
  if [ -z "$thread_node" ]; then
    echo -e "${magenta}- GBSapp will use (total processors/cores)-2 ${white}"
    echo -e "${magenta}- Quit (ctrl + c), else GBSapp will continue in 10 seconds ${white}"
    sleep 5
  fi

  echo $samples_list | awk -F' ' '{ for (i=1;i<=NF;i+=1) print $i }' | grep -v R2.f | grep -v _uniq_R1.fasta | grep -v _uniq_R2.fasta | grep -v _uniq_R1.hold.fasta | \
  awk '{gsub(/_R1.fastq/,".fastq"); gsub(/.R1.fastq/,".fastq"); gsub(/_R1.fq/,".fq"); gsub(/.R1.fq/,".fq"); print}' > samples_list_node_1.txt
  printf "samples_list=samples_list_node_1.txt\n" >> config.sh
  cat header.txt config.sh fetchdir.txt $string2 $string3 | awk '{ sub("\r$",""); print}' > GBSapp_run.sh
  rm header.txt fetchdir.txt
  echo -e "${magenta}- GBSapp is ready to submit job ${white}"
  echo -e "${magenta}- Do you want to continue? ${white}"
  read -p "- y(YES) or n(NO)? " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${magenta}\n- shell script will be saved to ${projdir}GBSapp_run.sh ${white}\n"
    exit 1
  else
    bash ${projdir}GBSapp_run.sh
  fi
fi





if [[ "$string" == true ]]; then
if [ -z $cluster ]; then
  echo -e "${magenta}- GBSapp will run in walkaway mode\n ${white}"
  echo -e "${white}##############################################################################\n ${white}"
  if [ -z "$thread_node" ]; then
    echo -e "${magenta}- GBSapp will use (total processors/cores)-2 ${white}"
    echo -e "${magenta}- Quit (ctrl + c), else GBSapp will continue in 10 seconds ${white}"
    sleep 5
  fi

  echo -e "${magenta}- Do you want to perform read alignments and alignment post-processing? ${white}"
  read -p "- y(YES) or n(NO) " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  	printf '\n'
	printf "alignments=0 \n" > steps.txt
  	echo -e "${magenta}- skipping read_alignments and alignment post-processing ${white}"
    echo -e "${white}\n##############################################################################\n"
  else
    printf '\n'
    printf "alignments=1 \n" > steps.txt
    echo -e "${white}\n##############################################################################\n"
  fi

  echo -e "${magenta}- Do you want to perform SNP/variant calling? ${white}"
  read -p "- y(YES) or n(NO) " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  	printf '\n'
	printf "snp_calling=0 \n" >> steps.txt
  	echo -e "${magenta}- skipping SNP/variant calling ${white}"
    echo -e "${white}\n##############################################################################\n"
  else
    printf '\n'
    printf "snp_calling=1 \n" >> steps.txt
    echo -e "${white}\n##############################################################################\n"
  fi

  echo -e "${magenta}- Do you want to perform SNP/variant filtering? ${white}"
  read -p "- y(YES) or n(NO) " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  	printf '\n'
	printf "snp_filtering=0 \n" >> steps.txt
  	echo -e "${magenta}- skipping SNP/variant filtering ${white}"
    echo -e "${white}\n##############################################################################\n"
  else
    printf '\n'
    printf "snp_filtering=1 \n" >> steps.txt
    echo -e "${white}\n##############################################################################\n"
  fi

  printf "SNPaccuracy_ReadDepth=0 \n" >> steps.txt
  printf "paralogfiltering_haplotyping=0 \n" >> steps.txt
  # echo -e "${magenta}- Do you want to generate visualizations for genotype accuracy and ploidy estimation? ${white}"
  # read -p "- y(YES) or n(NO) " -n 1 -r
  # if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  # 	printf '\n'
	# printf "SNPaccuracy_ReadDepth=0 \n" >> steps.txt
  # 	echo -e "${magenta}- skipping visualizations for genotype accuracy and ploidy estimation ${white}"
  #   echo -e "${white}\n##############################################################################\n"
  # else
  #   printf '\n'
  #   printf "SNPaccuracy_ReadDepth=1 \n" >> steps.txt
  #   echo -e "${white}\n##############################################################################\n"
  # fi
  #
  # echo -e "${magenta}- Do you want to perform sequence-based haplotyping and filtering? ${white}"
  # read -p "- y(YES) or n(NO) " -n 1 -r
  # if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  # 	printf '\n'
	# printf "paralogfiltering_haplotyping=0 \n" >> steps.txt
  # 	echo -e "${magenta}- skipping sequence-based haplotyping and filtering ${white}"
  #   echo -e "${white}\n##############################################################################\n"
  # else
  #   printf '\n'
  #   printf "paralogfiltering_haplotyping=1 \n" >> steps.txt
  #   echo -e "${white}\n##############################################################################\n"
  # fi

  printf "#""!""/bin/bash \n\n" > header.txt
  printf "walkaway=true \n\n" > walkaway.txt
  printf "GBSapp_dir=${GBSapp_dir}\n" > fetchdir.txt
  printf "projdir=${projdir}" >> fetchdir.txt
  echo $samples_list | awk -F' ' '{ for (i=1;i<=NF;i+=1) print $i }' | grep -v R2.f | grep -v _uniq_R1.fasta | grep -v _uniq_R2.fasta | grep -v _uniq_R1.hold.fasta | \
  awk '{gsub(/_R1.fastq/,".fastq"); gsub(/.R1.fastq/,".fastq"); gsub(/_R1.fq/,".fq"); gsub(/.R1.fq/,".fq"); print}' > samples_list_node_1.txt
  printf "samples_list=samples_list_node_1.txt\n" >> config.sh
  cat header.txt steps.txt config.sh walkaway.txt fetchdir.txt $string2 $string3 | awk '{ sub("\r$",""); print}' > GBSapp_run.sh
  rm header.txt walkaway.txt fetchdir.txt steps.txt

  echo -e "${magenta}- GBSapp is ready to submit job ${white}"
  echo -e "${magenta}- Do you want to continue? ${white}"
  read -p "- y(YES) or n(NO)? " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${magenta}\n- shell script will be saved to ${projdir}GBSapp_run.sh ${white}\n"
    exit 1
  else
    nohup bash ${projdir}GBSapp_run.sh > terminal.out 2>&1 &
  fi
fi
fi





if [[ "$string" == true ]]; then
if [[ "$cluster" == true ]]; then
  if [ -z "$thread_node" ]; then
    echo -e "${magenta}- Please provide number of threads in config.sh (for cluster node) ${white}"
    echo -e "${magenta}- GBSapp will quit ${white}"
    sleep 2
    exit 1
  fi
  echo -e "${magenta}- GBSapp will run in walkaway mode\n ${white}"
  echo -e "${white}##############################################################################\n ${white}"

  echo -e "${magenta}- Do you want to perform read alignments and alignment post-processing? ${white}"
  read -p "- y(YES) or n(NO) " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  	printf '\n'
	printf "alignments=0 \n" > steps.txt
  	echo -e "${magenta}- skipping read_alignments and alignment post-processing ${white}"
    echo -e "${white}\n##############################################################################\n"
  else
    printf '\n'
    printf "alignments=1 \n" > steps.txt
    echo -e "${white}\n##############################################################################\n"
  fi

  echo -e "${magenta}- Do you want to perform SNP/variant calling? ${white}"
  read -p "- y(YES) or n(NO) " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  	printf '\n'
	printf "snp_calling=0 \n" >> steps.txt
  	echo -e "${magenta}- skipping SNP/variant calling ${white}"
    echo -e "${white}\n##############################################################################\n"
  else
    printf '\n'
    printf "snp_calling=1 \n" >> steps.txt
    echo -e "${white}\n##############################################################################\n"
  fi

  echo -e "${magenta}- Do you want to perform SNP/variant filtering? ${white}"
  read -p "- y(YES) or n(NO) " -n 1 -r
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  	printf '\n'
	printf "snp_filtering=0 \n" >> steps.txt
  	echo -e "${magenta}- skipping SNP/variant filtering ${white}"
    echo -e "${white}\n##############################################################################\n"
  else
    printf '\n'
    printf "snp_filtering=1 \n" >> steps.txt
    echo -e "${white}\n##############################################################################\n"
  fi

  printf "SNPaccuracy_ReadDepth=0 \n" >> steps.txt
  printf "paralogfiltering_haplotyping=0 \n" >> steps.txt
  # echo -e "${magenta}- Do you want to generate visualizations for genotype accuracy and ploidy estimation? ${white}"
  # read -p "- y(YES) or n(NO) " -n 1 -r
  # if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  # 	printf '\n'
	# printf "SNPaccuracy_ReadDepth=0 \n" >> steps.txt
  # 	echo -e "${magenta}- skipping visualizations for genotype accuracy and ploidy estimation ${white}"
  #   echo -e "${white}\n##############################################################################\n"
  # else
  #   printf '\n'
  #   printf "SNPaccuracy_ReadDepth=1 \n" >> steps.txt
  #   echo -e "${white}\n##############################################################################\n"
  # fi
  #
  # echo -e "${magenta}- Do you want to perform sequence-based haplotyping and filtering? ${white}"
  # read -p "- y(YES) or n(NO) " -n 1 -r
  # if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  # 	printf '\n'
	# printf "paralogfiltering_haplotyping=0 \n" >> steps.txt
  # 	echo -e "${magenta}- skipping sequence-based haplotyping and filtering ${white}"
  #   echo -e "${white}\n##############################################################################\n"
  # else
  #   printf '\n'
  #   printf "paralogfiltering_haplotyping=1 \n" >> steps.txt
  #   echo -e "${white}\n##############################################################################\n"
  # fi

  printf "#""!""/bin/bash \n#SBATCH -c ${thread_node} \n\n" > cluster_header.sh
  printf "walkaway=true \n\n" > walkaway.txt
  if [[ $n_nodes -gt 1 ]]; then
    for i in $(seq 1 "$n_nodes"); do
      echo $samples_list | awk -F' ' -v pos=$i -v skip=$n_nodes '{ for (i=pos;i<=NF;i+=skip) print $i }' | grep -v R2.f | grep -v _uniq_R1.fasta | grep -v _uniq_R2.fasta | grep -v _uniq_R1.hold.fasta | awk '{gsub(/_R1.fastq/,".fastq"); gsub(/.R1.fastq/,".fastq"); gsub(/_R1.fq/,".fq"); gsub(/.R1.fq/,".f"); gsub(/_R1.fq/,".fq"); print}'> samples_list_node_${i}.txt
    done
    wait
    for i in $(seq 1 "$n_nodes"); do
      grep -v '^samples_list=' config.sh > config_node.sh
      printf "samples_list=samples_list_node_${i}.txt\n" >> config_node.sh
      if [[ "$i" -gt 1 ]]; then
        awk '{gsub(/snp_filtering=1/,"snp_filtering=0"); gsub(/SNPaccuracy_ReadDepth=1/,"SNPaccuracy_ReadDepth=0"); gsub(/paralogfiltering_haplotyping=1/,"paralogfiltering_haplotyping=0"); print}' steps.txt > steps_node.txt
      else
        cp steps.txt steps_node.txt
      fi
      cat cluster_header.sh steps_node.txt config_node.sh walkaway.txt fetchdir.txt $string2 $string3 | awk '{ sub("\r$",""); print}' | \
      awk -v i=$i '{gsub(/log.out/,"log_node_"i".out"); print}' > GBSapp_run_node_${i}.sh
      rm config_node.sh steps_node.txt
    done
    rm fetchdir.txt cluster_header.sh header.txt steps.txt walkaway.txt
    slurm_check=$(sbatch --version)
    if [[ $slurm_check == slurm* ]]; then
      echo -e "${magenta}- GBSapp is ready to submit jobs to $n_nodes nodes ${white}"
      echo -e "${magenta}- Do you want to continue? ${white}"
      read -p "- y(YES) or n(NO)? " -n 1 -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${magenta}\n- shell script will be saved to ${projdir}GBSapp_run_node_*.sh ${white}\n"
        exit 1
      else
        sbatch ${projdir}GBSapp_run_node_1.sh
        for nn in $(seq 2 "$n_nodes"); do
          sbatch ${projdir}GBSapp_run_node_${nn}.sh
        done
      fi
    else
      echo -e "${magenta}- Cluster manager not SLURM, revise batch file header in ${projdir}GBSapp_run.sh to for cluster manager syntax ${white}"
      echo -e "${magenta}- Revise batch file header in ${projdir}GBSapp_run.sh for your cluster manager ${white}"
    fi
  else
    echo $samples_list | awk -F' ' '{ for (i=1;i<=NF;i+=1) print $i }' | grep -v R2.f | grep -v _uniq_R1.fasta | grep -v _uniq_R2.fasta | grep -v _uniq_R1.hold.fasta | \
    awk '{gsub(/_R1.fastq/,".fastq"); gsub(/.R1.fastq/,".fastq"); gsub(/_R1.fq/,".fq"); gsub(/.R1.fq/,".fq"); print}' > samples_list_node_1.txt
    printf "samples_list=samples_list_node_1.txt\n" >> config.sh
    cat cluster_header.sh steps.txt config.sh walkaway.txt fetchdir.txt $string2 $string3 | awk '{ sub("\r$",""); print}' > GBSapp_run.sh
    rm fetchdir.txt cluster_header.sh header.txt steps.txt walkaway.txt
    slurm_check=$(sbatch --version)
    if [[ $slurm_check == slurm* ]]; then
      echo -e "${magenta}- GBSapp is ready to submit job ${white}"
      echo -e "${magenta}- Do you want to continue? ${white}"
      read -p "- y(YES) or n(NO)? " -n 1 -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${magenta}\n- shell script will be saved to ${projdir}GBSapp_run.sh ${white}\n"
        exit 1
      else
        sbatch ${projdir}GBSapp_run.sh
      fi
    else
      echo -e "${magenta}- Cluster manager not SLURM, revise batch file header in ${projdir}GBSapp_run.sh to for cluster manager syntax ${white}"
      echo -e "${magenta}- Revise batch file header in ${projdir}GBSapp_run.sh for your cluster manager ${white}"
    fi
  fi
fi
fi
}
cd $projdir
time main

echo -e "${magenta}- For jobs running in background, monitor progress in terminal.out or slurm-xxxxxx.out (slurm cluster manager) ${white}"
echo -e "${magenta}- The log.out file can help with troubleshooting and when reporting a bug ${white}"
